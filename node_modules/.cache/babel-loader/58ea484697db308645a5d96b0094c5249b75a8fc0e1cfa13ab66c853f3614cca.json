{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  skills: [],\n  experience: {\n    interval: \"\",\n    position: \"\",\n    unit: \"\",\n    company: \"\",\n    place: \"\",\n    description: \"\"\n  }\n};\nexport const getExperience = createAsyncThunk(\"experience/fetchData\", async () => {\n  const response = await (await fetch(`http://localhost:3000/resume.json`)).json();\n  const data = await response.afk.work_experience;\n  console.log(data);\n  const experience = {\n    experience: {\n      interval: data.interval,\n      position: data.position,\n      unit: data.unit,\n      company: data.company,\n      place: data.place,\n      description: data.description\n    },\n    skills: data.skills\n  };\n});\nconst experienceSlice = createSlice({\n  name: \"experience\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getExperience.fulfilled, (state, action) => {});\n  }\n});\nexport const selectExperience = state => {\n  return state.experience;\n};\nexport default experienceSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","skills","experience","interval","position","unit","company","place","description","getExperience","response","fetch","json","data","afk","work_experience","console","log","experienceSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","selectExperience","reducer"],"sources":["/Users/akos/Development/gitRepos/resume/src/store/experience/experience-slice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../resume-store\";\n\nexport type ExperienceType = {\n  interval: string;\n  position: string;\n  unit: string;\n  company: string;\n  place: string;\n  description: string;\n};\n\ntype ExperienceData = {\n  experience: ExperienceType;\n  skills: string[];\n};\n\nconst initialState: ExperienceData = {\n  skills: [],\n  experience: {\n    interval: \"\",\n    position: \"\",\n    unit: \"\",\n    company: \"\",\n    place: \"\",\n    description: \"\",\n  },\n};\nexport const getExperience = createAsyncThunk(\n  \"experience/fetchData\",\n  async () => {\n    const response = await (\n      await fetch(`http://localhost:3000/resume.json`)\n    ).json();\n\n    const data = await response.afk.work_experience;\n    console.log(data);\n    const experience: ExperienceData = {\n      experience: {\n        interval: data.interval,\n        position: data.position,\n        unit: data.unit,\n        company: data.company,\n        place: data.place,\n        description: data.description,\n      },\n      skills: data.skills,\n    };\n  }\n);\nconst experienceSlice = createSlice({\n  name: \"experience\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getExperience.fulfilled, (state, action) => {});\n  },\n});\n\nexport const selectExperience = (state: RootState) => {\n  return state.experience;\n};\n\nexport default experienceSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAiBhE,MAAMC,YAA4B,GAAG;EACnCC,MAAM,EAAE,EAAE;EACVC,UAAU,EAAE;IACVC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE;EACf;AACF,CAAC;AACD,OAAO,MAAMC,aAAa,GAAGX,gBAAgB,CAC3C,sBAAsB,EACtB,YAAY;EACV,MAAMY,QAAQ,GAAG,MAAM,CACrB,MAAMC,KAAK,CAAE,mCAAkC,CAAC,EAChDC,IAAI,EAAE;EAER,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,GAAG,CAACC,eAAe;EAC/CC,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;EACjB,MAAMX,UAA0B,GAAG;IACjCA,UAAU,EAAE;MACVC,QAAQ,EAAEU,IAAI,CAACV,QAAQ;MACvBC,QAAQ,EAAES,IAAI,CAACT,QAAQ;MACvBC,IAAI,EAAEQ,IAAI,CAACR,IAAI;MACfC,OAAO,EAAEO,IAAI,CAACP,OAAO;MACrBC,KAAK,EAAEM,IAAI,CAACN,KAAK;MACjBC,WAAW,EAAEK,IAAI,CAACL;IACpB,CAAC;IACDP,MAAM,EAAEY,IAAI,CAACZ;EACf,CAAC;AACH,CAAC,CACF;AACD,MAAMiB,eAAe,GAAGnB,WAAW,CAAC;EAClCoB,IAAI,EAAE,YAAY;EAClBnB,YAAY;EACZoB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACd,aAAa,CAACe,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK,CAAC,CAAC,CAAC;EACjE;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAIF,KAAgB,IAAK;EACpD,OAAOA,KAAK,CAACvB,UAAU;AACzB,CAAC;AAED,eAAegB,eAAe,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}